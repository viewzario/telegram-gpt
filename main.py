import os
import logging
import telebot
from openai import OpenAI
from openai._types import NOT_GIVEN 
from flask import Flask
from threading import Thread
import json

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ ===
if os.path.exists("data.json"):
    with open("data.json", "r") as f:
        data = json.load(f)
        chat_to_thread_id = data.get("chat_to_thread_id", {})
        chat_to_run_id = data.get("chat_to_run_id", {})
else:
    chat_to_thread_id = {}
    chat_to_run_id = {}


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ .env / Secrets
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
if not OPENAI_API_KEY:
    raise ValueError("‚ùå –ù–µ—Ç API-–∫–ª—é—á–∞ OpenAI.")
if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ Telegram.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Assistants v2
client = OpenAI(
    api_key=OPENAI_API_KEY,
    default_headers={"OpenAI-Beta": "assistants=v2"}
)

# Telegram-–±–æ—Ç
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ß–∞—Ç -> thread_id
chat_to_thread_id = {}
chat_to_run_id = {}

# –°–æ–∑–¥–∞—ë–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑

assistant_id = "asst_heHB29G3R8fmhgedCGVoafxo"

def save_data():
    with open("data.json", "w") as f:
        json.dump({
            "chat_to_thread_id": chat_to_thread_id,
            "chat_to_run_id": chat_to_run_id
        }, f)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = str(message.chat.id)
    user_input = message.text

    print(f"üí¨ {chat_id}: {user_input}")

    # –°–æ–∑–¥–∞—ë–º thread_id, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if chat_id not in chat_to_thread_id:
        thread = client.beta.threads.create()
        chat_to_thread_id[chat_id] = thread.id
        print(f"üßµ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π thread: {thread.id}")
        save_data()

    thread_id = chat_to_thread_id[chat_id]

    # ‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π run?
    if chat_id in chat_to_run_id:
        current_run = client.beta.threads.runs.retrieve(
            thread_id=thread_id,
            run_id=chat_to_run_id[chat_id]
        )
        if current_run.status in ["queued", "in_progress"]:
            try:
                bot.send_message(chat_id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏, —è –µ—â—ë –¥—É–º–∞—é –Ω–∞–¥ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º...")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")
            return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ OpenAI
    client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=user_input
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º run
    run = client.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=assistant_id
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º run_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_to_run_id[chat_id] = run.id
    save_data()

    # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run
    while True:
        run = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        if run.status == "completed":
            break

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    messages = client.beta.threads.messages.list(thread_id=thread_id)
    response = messages.data[0].content[0].text.value

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
    try:
        bot.send_message(chat_id, response)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot
app = Flask('')

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç –æ–Ω–ª–∞–π–Ω!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

# –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
flask_thread = Thread(target=run_flask)
flask_thread.start()

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram...")
    bot.polling(none_stop=True)
